version: '3.7'

services:
  connector:
    image: "ghcr.io/flightaware/firestarter/firestarter_connector:${FS_VERSION:-latest}"
    build:
      context: .
      dockerfile: connector/Dockerfile
    init: true
    networks:
      - internal
    ports:
      # Provides optional access to the raw Firehose stream for consumption
      # by non-dockerized applications
      - "${STREAMING_PORT:-127.0.0.1:1601}:1601"
    environment:
      # Firehose account username
      - FH_USERNAME=${FH_USERNAME:?FH_USERNAME variable must be set}
      # Firehose account key
      - FH_APIKEY=${FH_APIKEY:?FH_APIKEY variable must be set}
      # Firehose URL, firehose.flightaware.com can also be used
      - SERVER=${SERVER:-firehose-test.flightaware.com}
      # Streaming compression of incoming Firehose data. Valid values are gzip,
      # deflate, or compress. Leave blank to disable compression.
      - COMPRESSION=${COMPRESSION:-}
      # Frequency in seconds to print stats about connection (messages/bytes
      # per second). Set to 0 to disable.
      - PRINT_STATS_PERIOD=${PRINT_STATS_PERIOD:-10}
      # Frequency in seconds that Firehose should send a synthetic "keepalive"
      # message to help connector ensure the connection is still alive. If no
      # such message is received within roughly $keepalive seconds, connector
      # will automatically reconnect to Firehose.
      - KEEPALIVE=${KEEPALIVE:-60}
      # "Time mode" of Firehose init command. Can be "live" or "pitr <pitr>";
      # range is currently not supported.
      # See https://flightaware.com/commercial/firehose/documentation/commands
      # for more details.
      - INIT_CMD_TIME=${INIT_CMD_TIME:-live}
      # The "optional" section of the Firehose init command. Mostly consists of
      # filters for the data. Do not put username, password, keepalive, or
      # compression commands here. Documentation at
      # https://flightaware.com/commercial/firehose/documentation/commands
      - INIT_CMD_ARGS=${INIT_CMD_ARGS:-}
      - PYTHONUNBUFFERED=1
      # Use a single topic for all events to ensure proper ordering per flight
      - KAFKA_TOPIC_NAME=events
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

  db-updater:
    image: "ghcr.io/flightaware/firestarter/firestarter_db-updater:${FS_VERSION:-latest}"
    build:
      context: .
      dockerfile: db-updater/Dockerfile
    init: true
    networks:
      - internal
    environment:
      # URL to database that will be updated based on Firehose contents.
      # Documentation at https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls
      - DB_URL=${FLIGHTS_DB_URL:-sqlite:///db/flights.db}
      - PYTHONUNBUFFERED=1
      # Same kafka topic name as the producer of the feed that you want to consume
      - KAFKA_TOPIC_NAME=events
      # Consumers with the same group name will split the data between them,
      # but consumers with different group names will each receive all of the messages 
      - KAFKA_GROUP_NAME=group1
      # Set this to "flights" or "positions" depending on what kinds of messages this updater is handling
      - TABLE=flights
    volumes:
      - data:/home/firestarter/app/db
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

  position-db-updater:
    image: "ghcr.io/flightaware/firestarter/firestarter_db-updater:${FS_VERSION:-latest}"
    build:
      context: .
      dockerfile: db-updater/Dockerfile
    init: true
    networks:
      - internal
    environment:
      # URL to database that will be updated based on Firehose contents.
      # Documentation at https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls
      - DB_URL=${POSITIONS_DB_URL:-postgresql://postgres:positions@timescaledb:5432}
      - PYTHONUNBUFFERED=1
      # Same kafka topic name as the producer of the feed that you want to consume
      - KAFKA_TOPIC_NAME=events
      # Consumers with the same group name will split the data between them,
      # but consumers with different group names will each receive all of the messages 
      - KAFKA_GROUP_NAME=position_group1
      # Set this to "flights" or "positions" depending on what kinds of messages this updater is handling
      - TABLE=positions
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"
    depends_on:
      - timescaledb

  fids-backend:
    image: "ghcr.io/flightaware/firestarter/firestarter_fids:${FS_VERSION:-latest}"
    build:
      context: .
      dockerfile: fids/Dockerfile
    init: true
    networks:
      internal:
        aliases:
          - fids-backend
    environment:
      # URL to database that is being updated by db-updater.
      # Documentation at https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls
      - FLIGHTS_DB_URL=${FLIGHTS_DB_URL:-sqlite:///db/flights.db}
      - POSITIONS_DB_URL=${POSITIONS_DB_URL:-postgresql://postgres:positions@timescaledb:5432}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-}
      - PYTHONUNBUFFERED=1
    volumes:
      - data:/home/firestarter/app/db
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

  fids-frontend:
    image: "ghcr.io/flightaware/fids_frontend/fids-frontend:${FIDS_VERSION:-latest}"
    ports:
      # Port upon which to serve webapp
      - "${WEB_SERVER_PORT:-8080}:80"
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

  map:
    image: "ghcr.io/flightaware/firestarter/firestarter_map:${FS_VERSION:-latest}"
    build:
      context: .
      dockerfile: map/Dockerfile
    init: true
    ports:
      # Port upon which to serve webapp
      - "${MAP_SERVER_PORT:-5001}:5001"
    networks:
      - internal
    environment:
      - PYTHONUNBUFFERED=1
      - KAFKA_TOPIC_NAME=events
      - KAFKA_GROUP_NAME=map_group
      - GOOGLE_MAPS_API_KEY
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"
        max-file: "5"

  zookeeper:
    image: "bitnami/zookeeper:3.6.2"
    init: true
    networks:
      - internal
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: "bitnami/kafka:2.5.0"
    init: true
    networks:
      - internal
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Retain messages for 1 hour
      - KAFKA_CFG_LOG_RETENTION_HOURS=1
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper

  timescaledb:
    image: "timescale/timescaledb:1.7.4-pg12"
    init: true
    networks:
      - internal
    environment:
      - POSTGRES_PASSWORD=positions
    volumes:
      - position_data:/var/lib/postgresql/data

volumes:
  data:
  position_data:
  kafka_data:
  zookeeper_data:

networks:
  internal:
